//What is this? This is your build.gradle!

//This is  a useful file which will help you manage running and building your application

/*Rather than run the app straight through Intelli J, you will always want to be looking
 * for the Gradle Tab on the right hand side of the IDE. This will allow you
 * to run Gradle Tasks, rather than just IntelliJ functions. It may seem complicated now,
 * but this will save you a lot of headaches as your app gains dependencies and needs to
 * be built in more complicated ways.
*/
plugins {
    id 'application'
    id 'java'
}
mainClassName = 'edu.wpi.teamname.Main'


//These are the repositories where Gradle looks for dependencies.
// You likely won't have to change these unless you add a cool, new dependency that isn't listed on Maven
repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://apisite.crmyers.dev/maven'
    }
}

//This is where you declare your dependencies and their version.s
//You will almost DEFINITELY add more here
dependencies {
    implementation(
            'com.jfoenix:jfoenix:8.0.10',

            // You may comment out the database dependency you do not use
            'org.xerial:sqlite-jdbc:3.30.1',
            'org.apache.derby:derby:10.14.2.0',

            'org.slf4j:slf4j-api:1.7.30',
            'org.slf4j:slf4j-simple:1.7.30',
    )
//These are test dependencies. These are only used for running verification tasks via Gradle.
    testCompile(
            "org.testfx:testfx-core:4.0.16-alpha",
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha',
    )
}

//This tells your verification Tasks to use JUnit. You shouldn't need to change this
test {
    useJUnitPlatform()
}

//this is where you describe your jar. It's important that the Main-Class always points to the class
// with the Main method you want run!
jar {
    manifest {
        attributes 'Main-Class': 'edu.wpi.teamname.Main'
    }
}




